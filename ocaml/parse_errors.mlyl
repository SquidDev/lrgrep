{}

rule error_message = parse error

(*

  let x = 5 ;
  let y = 6 
  let z = 7

*)

| (structure_item; <-; SEMI as semi; 
  LET; ext; list(attribute); rec_flag; let_binding_body); <-
  {
    let Parser_raw.MenhirInterpreter.Element (_lr1, _val, startp, _endp) = semi in
    "Spurious semi-colon at " ^ string_of_int startp.pos_lnum ^
    ":" ^ string_of_int (startp.pos_cnum - startp.pos_bol)
  }

| LPAREN; [. RPAREN]; <-
  { "Unclosed parenthesis" }

| [. expr ]; <-
  { "Expecting expression" }

(*rule main = parse
| ([ . module_expr ] & [ . paren_module_expr ]) <-
  { `Module_expr_struct_paren_module_expr }
| [ . module_type ] <-
  { `Sig_or_lparen_module_type }
| ([ . FOR ] | [ . IF ]) <-
  { `For_If }
|*)
